{"remainingRequest":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/babel-loader/lib/index.js!/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/src/pages/Room.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/src/pages/Room.vue","mtime":1640311001626},{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/babel.config.js","mtime":1605762734073},{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js\";\nimport _typeof from \"/Users/yq/Desktop/Notes/webRTC/learn-webrtc/webrtc-static/node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport socket from \"../utils/socket.js\";\nexport default {\n  name: 'Room',\n  created: function created() {\n    if (this.canSupportWebRTC()) {\n      this.initSocketEvents();\n      this.initVIDEO_VIEWSdk();\n    }\n  },\n  data: function data() {\n    var validateRoomId = function validateRoomId(rule, value, callback) {\n      var reg = /^\\d{1,4}$/;\n\n      if (!reg.test(value)) {\n        return callback(new Error('房间ID只能为1-4位的数字'));\n      }\n\n      callback();\n    };\n\n    var validateName = function validateName(rule, value, callback) {\n      var reg = /^[\\u4e00-\\u9fa5a-zA-Z-z]{1,10}$/;\n\n      if (!reg.test(value)) {\n        return callback(new Error('请输入合法的姓名'));\n      }\n\n      callback();\n    };\n\n    return {\n      showFormArea: true,\n      roomForm: {\n        roomId: '',\n        userName: ''\n      },\n      rules: {\n        roomId: [{\n          required: true,\n          message: '请输入房间ID',\n          trigger: ['blur', 'change']\n        }, {\n          validator: validateRoomId,\n          trigger: ['blur', 'change']\n        }],\n        userName: [{\n          required: true,\n          message: '请输入姓名',\n          trigger: ['blur', 'change']\n        }, {\n          validator: validateName,\n          trigger: ['blur', 'change']\n        }]\n      },\n      canClickBtn: true,\n      sockId: '',\n      roomUsers: [],\n      canSupportVideo: false,\n      localStream: null,\n      peer: null,\n      peerConfigs: {// 本地测试无需打洞 如部署到公网 需填写coturn的配置\n        // iceServers: [{\n        //   urls: 'turn:xxx:3478',\n        //   credential: 'xxx',\n        //   username: 'xxx'\n        // }],\n      },\n      offerOption: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n      }\n    };\n  },\n  computed: {\n    user: function user() {\n      return Object.assign({}, {\n        sockId: this.sockId\n      }, this.roomForm);\n    },\n    receiveUser: function receiveUser() {\n      var _this = this;\n\n      return this.roomUsers.find(function (item) {\n        return item.sockId !== _this.sockId;\n      });\n    }\n  },\n  methods: {\n    // 判断设备是否webrtc\n    canSupportWebRTC: function canSupportWebRTC() {\n      if (_typeof(navigator.mediaDevices) !== 'object') {\n        this.$message.error('No navigator.mediaDevices');\n        return false;\n      }\n\n      if (typeof navigator.mediaDevices.enumerateDevices !== 'function') {\n        this.$message.error('No navigator.mediaDevices.enumerateDevices');\n        return false;\n      }\n\n      if (typeof navigator.mediaDevices.getUserMedia !== 'function') {\n        this.$message.error('No navigator.mediaDevices.getUserMedia');\n        return false;\n      }\n\n      this.canSupportVideo = true;\n      this.getDevices();\n      return true;\n    },\n    getDevices: function () {\n      var _getDevices = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var devices, msg;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return navigator.mediaDevices.enumerateDevices();\n\n              case 3:\n                devices = _context.sent;\n                VIDEO_VIEW.showDevicesNameByDevices(devices);\n                _context.next = 12;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n                msg = \"getDevices error: \".concat(_context.t0.name, \" : \").concat(_context.t0.message);\n                this.$message.error(msg);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function getDevices() {\n        return _getDevices.apply(this, arguments);\n      }\n\n      return getDevices;\n    }(),\n    // 初始化socket事件\n    initSocketEvents: function initSocketEvents() {\n      var _this2 = this;\n\n      window.onbeforeunload = function () {\n        socket.emit('userLeave', {\n          userName: _this2.roomForm.userName,\n          sockId: _this2.sockId,\n          roomId: _this2.roomForm.roomId\n        });\n      }; // 连接成功\n\n\n      socket.on('connectionSuccess', function (sockId) {\n        _this2.sockId = sockId;\n        console.log('connectionSuccess client sockId:', sockId);\n      }); // 房间人数已满提示\n\n      socket.on('checkRoomSuccess', function (exsitRoomUsers) {\n        _this2.canClickBtn = true;\n\n        if (exsitRoomUsers && exsitRoomUsers.length > 1) {\n          _this2.$message.info('当前房间人数已满~请换个房间id');\n        } else {\n          _this2.showFormArea = false;\n          _this2.roomUsers = [{\n            userName: _this2.roomForm.userName + '(我)',\n            sockId: _this2.sockId,\n            roomId: _this2.roomForm.roomId\n          }];\n        }\n      }); // 用户加入房间成功提示\n\n      socket.on('joinRoomSuccess', function (roomUsers) {\n        console.log('joinRoomSuccess client user:', roomUsers);\n        var otherUser = roomUsers.find(function (item) {\n          return item.sockId !== _this2.sockId;\n        });\n        if (!otherUser) return false;\n\n        _this2.$message.success(\"\".concat(otherUser.userName, \"\\u52A0\\u5165\\u4E86\\u623F\\u95F4\"));\n\n        _this2.roomUsers = [otherUser, {\n          userName: _this2.roomForm.userName + '(我)',\n          sockId: _this2.sockId,\n          roomId: _this2.roomForm.roomId\n        }];\n      }); // 用户离开\n\n      socket.on('userLeave', function (roomUsers) {\n        console.log('userLeave client user:', roomUsers);\n\n        if (!roomUsers.length) {\n          _this2.showFormArea = true;\n          _this2.sockId = '';\n        }\n\n        var serverSockIdArr = roomUsers.map(function (item) {\n          return item.sockId;\n        });\n\n        _this2.roomUsers.forEach(function (item) {\n          if (serverSockIdArr.indexOf(item.sockId) === -1) {\n            _this2.$message.info(\"\".concat(item.userName, \"\\u79BB\\u5F00\\u4E86\\u623F\\u95F4\"));\n\n            if (item.sockId === _this2.sockId) {\n              _this2.showFormArea = true;\n              _this2.sockId = '';\n            }\n          }\n        });\n\n        _this2.roomUsers = roomUsers;\n\n        _this2.roomUsers.forEach(function (item) {\n          if (item.sockId === _this2.sockId) {\n            item.userName = item.userName + '(我)';\n          }\n        }); // TODO: 挂断视频\n\n\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      socket.on('disconnect', function (message) {\n        _this2.showFormArea = true;\n        _this2.sockId = '';\n        console.log('client sock disconnect:', message);\n        socket.emit('userLeave', _this2.user); // TODO: 挂断视频\n\n        VIDEO_VIEW.hideAllVideoModal();\n      }); // 视频相关\n      // 取消发送视频\n\n      socket.on('cancelSendVideo', function (user) {\n        var infoTips = user.sockId === _this2.sockId ? '您取消了发送视频' : '对方取消了发送视频';\n\n        _this2.$message.info(infoTips);\n\n        VIDEO_VIEW.hideAllVideoModal();\n      }); // 接收视频邀请\n\n      socket.on('receiveVideo', function (sender) {\n        if (_this2.user.sockId === sender.sockId) return false;\n        VIDEO_VIEW.showReceiveVideoModalBySender(sender);\n      }); // 拒绝接收视频\n\n      socket.on('rejectReceiveVideo', function (user) {\n        var infoTips = user.sockId === _this2.sockId ? '您拒绝了接收视频' : '对方拒绝了接收视频';\n\n        _this2.$message.info(infoTips);\n\n        VIDEO_VIEW.hideAllVideoModal();\n      }); // 接听视频\n\n      socket.on('answerVideo', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(user) {\n          var localStream, offer;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  VIDEO_VIEW.showInvideoModal(); // 创建本地视频流信息\n\n                  _context2.next = 3;\n                  return _this2.createLocalVideoStream();\n\n                case 3:\n                  localStream = _context2.sent;\n                  _this2.localStream = localStream;\n                  document.querySelector('#echat-local').srcObject = _this2.localStream;\n                  _this2.peer = new RTCPeerConnection();\n                  console.log(_this2.peer);\n\n                  _this2.initPeerListen();\n\n                  _this2.peer.addStream(_this2.localStream);\n\n                  if (!(user.sockId === _this2.sockId)) {\n                    _context2.next = 13;\n                    break;\n                  }\n\n                  _context2.next = 19;\n                  break;\n\n                case 13:\n                  _context2.next = 15;\n                  return _this2.peer.createOffer(_this2.offerOption);\n\n                case 15:\n                  offer = _context2.sent;\n                  _context2.next = 18;\n                  return _this2.peer.setLocalDescription(offer);\n\n                case 18:\n                  socket.emit('receiveOffer', {\n                    user: _this2.user,\n                    offer: offer\n                  });\n\n                case 19:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()); // 挂断视频\n\n      socket.on('hangupVideo', function (user) {\n        var infoTips = user.sockId === _this2.sockId ? '您挂断了视频' : '对方挂断了视频';\n\n        _this2.$message.info(infoTips);\n\n        _this2.peer.close();\n\n        _this2.peer = null;\n        VIDEO_VIEW.hideAllVideoModal();\n        document.querySelector('#echat-remote-1').srcObject = null;\n        document.querySelector('#echat-local').srcObject = null;\n      }); //\n\n      socket.on('addIceCandidate', /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(candidate) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this2.peer.addIceCandidate(candidate);\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      socket.on('receiveOffer', /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(offer) {\n          var answer;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return _this2.peer.setRemoteDescription(offer);\n\n                case 2:\n                  _context4.next = 4;\n                  return _this2.peer.createAnswer();\n\n                case 4:\n                  answer = _context4.sent;\n                  _context4.next = 7;\n                  return _this2.peer.setLocalDescription(answer);\n\n                case 7:\n                  socket.emit('receiveAnsewer', {\n                    answer: answer,\n                    user: _this2.user\n                  });\n\n                case 8:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n      socket.on('receiveAnsewer', function (answer) {\n        _this2.peer.setRemoteDescription(answer);\n      });\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      if (!this.sockId) {\n        this.$message.error('socket未连接成功,请刷新再尝试!');\n        window.location.reload();\n        return false;\n      }\n\n      this.$refs.roomForm.validate(function (valid) {\n        if (valid) {\n          // 检查该房间人数\n          _this3.canClickBtn = false;\n          socket.emit('checkRoom', {\n            roomId: _this3.roomForm.roomId,\n            sockId: _this3.sockId,\n            userName: _this3.roomForm.userName\n          });\n        } else {\n          console.log('error submit!!');\n        }\n      });\n    },\n    resetForm: function resetForm() {\n      this.$refs.roomForm.resetFields();\n      this.roomForm.roomId = '';\n      this.roomForm.userName = '';\n    },\n    // 发送视频\n    toSendVideo: function toSendVideo() {\n      socket.emit('toSendVideo', this.user);\n      VIDEO_VIEW.showStartVideoModalByReceiver(this.receiveUser);\n    },\n    initVIDEO_VIEWSdk: function initVIDEO_VIEWSdk() {\n      var configOptios = {\n        startVideoCancelCb: this.startVideoCancelCb,\n        receiveVideoCancelCb: this.receiveVideoCancelCb,\n        receiveVideoAnswerCb: this.receiveVideoAnswerCb,\n        hangUpVideoCb: this.hangUpVideoCb,\n        openMikeCb: this.openMikeCb,\n        closeMikeCb: this.closeMikeCb,\n        openCammerCb: this.openCammerCb,\n        closeCammerCb: this.closeCammerCb,\n        toScreenCb: this.toScreenCb\n      };\n      VIDEO_VIEW.configCallBack(configOptios);\n    },\n    startVideoCancelCb: function startVideoCancelCb() {\n      socket.emit('cancelSendVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoCancelCb: function receiveVideoCancelCb() {\n      socket.emit('rejectReceiveVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoAnswerCb: function receiveVideoAnswerCb() {\n      socket.emit('answerVideo', this.user);\n    },\n    hangUpVideoCb: function hangUpVideoCb() {\n      socket.emit('hangupVideo', this.user);\n    },\n    openMikeCb: function openMikeCb() {},\n    closeMikeCb: function closeMikeCb() {},\n    openCammerCb: function openCammerCb() {},\n    closeCammerCb: function closeCammerCb() {},\n    toScreenCb: function toScreenCb() {},\n    createLocalVideoStream: function () {\n      var _createLocalVideoStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var constraints, localStream;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                constraints = {\n                  audio: true,\n                  video: true\n                };\n                _context5.next = 3;\n                return navigator.mediaDevices.getUserMedia(constraints);\n\n              case 3:\n                localStream = _context5.sent;\n                console.log('localStream:', localStream);\n                return _context5.abrupt(\"return\", localStream);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function createLocalVideoStream() {\n        return _createLocalVideoStream.apply(this, arguments);\n      }\n\n      return createLocalVideoStream;\n    }(),\n    initPeerListen: function initPeerListen() {\n      var _this4 = this;\n\n      this.peer.onicecandidate = function (event) {\n        if (event.candidate) {\n          socket.emit('addIceCandidate', {\n            candidate: event.candidate,\n            user: _this4.user\n          });\n        }\n      };\n\n      this.peer.onaddstream = function (event) {\n        // 拿到对方的视频流\n        document.querySelector('#echat-remote-1').srcObject = event.stream;\n      };\n\n      this.peer.onclose = function () {};\n    }\n  }\n};",{"version":3,"sources":["Room.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"m-room-wrapper\">\n      <div class=\"can-support-rtc\" v-if=\"canSupportVideo\">\n        <div class=\"form-area\" v-if=\"showFormArea\">\n            <el-form\n                :model=\"roomForm\"\n                :rules=\"rules\"\n                ref=\"roomForm\"\n                label-width=\"100px\"\n                class=\"room-form\"\n            >\n                <el-form-item label=\"房间ID\" prop=\"roomId\">\n                    <el-input v-model.trim=\"roomForm.roomId\" :disabled=\"!canClickBtn\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"姓名\" prop=\"userName\">\n                    <el-input v-model.trim=\"roomForm.userName\" :disabled=\"!canClickBtn\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"submitForm\" :disabled=\"!canClickBtn\">加入房间</el-button>\n                    <el-button @click=\"resetForm\">重置</el-button>\n                </el-form-item>\n            </el-form>\n        </div>\n        <div class=\"list-area\" v-if=\"!showFormArea\">\n            <h2>当前房间id: {{ roomForm.roomId }} </h2>\n            <h2>在线人数: {{ roomUsers.length }} </h2>\n            <el-card class=\"box-card\">\n                <div v-for=\"item in roomUsers\" :key=\"item.sockId\" class=\"item\">\n                    {{ item.userName }}\n                </div>\n            </el-card>\n            <el-button type=\"primary\" v-if=\"roomUsers.length > 1 && sockId\" @click=\"toSendVideo\">\n                发起视频\n            </el-button>\n        </div>\n      </div>\n      <div v-else>\n        <h1>当前域名的浏览器不支持WebRTC！</h1>\n      </div>\n    </div>\n</template>\n\n<script>\nimport socket from '../utils/socket.js';\n\nexport default {\n  name: 'Room',\n  created () {\n    if (this.canSupportWebRTC()) {\n      this.initSocketEvents();\n      this.initVIDEO_VIEWSdk();\n    }\n  },\n  data () {\n    const validateRoomId = (rule, value, callback) => {\n      const reg = /^\\d{1,4}$/;\n      if (!reg.test(value)) {\n        return callback(new Error('房间ID只能为1-4位的数字'));\n      }\n      callback();\n    };\n    const validateName = (rule, value, callback) => {\n      const reg = /^[\\u4e00-\\u9fa5a-zA-Z-z]{1,10}$/;\n      if (!reg.test(value)) {\n        return callback(new Error('请输入合法的姓名'));\n      }\n      callback();\n    };\n    return {\n      showFormArea: true,\n      roomForm: {\n        roomId: '',\n        userName: ''\n      },\n      rules: {\n        roomId: [\n          { required: true, message: '请输入房间ID', trigger: ['blur', 'change'] },\n          { validator: validateRoomId, trigger: ['blur', 'change'] }\n        ],\n        userName: [\n          { required: true, message: '请输入姓名', trigger: ['blur', 'change'] },\n          { validator: validateName, trigger: ['blur', 'change'] }\n        ],\n      },\n      canClickBtn: true,\n      sockId: '',\n      roomUsers: [],\n      canSupportVideo: false,\n      localStream: null,\n      peer: null,\n      peerConfigs: {\n        // 本地测试无需打洞 如部署到公网 需填写coturn的配置\n        // iceServers: [{\n        //   urls: 'turn:xxx:3478',\n        //   credential: 'xxx',\n        //   username: 'xxx'\n        // }],\n      },\n      offerOption: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n      },\n    };\n  },\n  computed: {\n    user () {\n      return Object.assign({}, { sockId: this.sockId }, this.roomForm);\n    },\n    receiveUser () {\n      return this.roomUsers.find(item => item.sockId !== this.sockId);\n    },\n  },\n  methods: {\n    // 判断设备是否webrtc\n    canSupportWebRTC () {\n      if (typeof navigator.mediaDevices !== 'object') {\n        this.$message.error('No navigator.mediaDevices');\n        return false;\n      }\n      if (typeof navigator.mediaDevices.enumerateDevices !== 'function') {\n        this.$message.error('No navigator.mediaDevices.enumerateDevices');\n        return false;\n      }\n      if (typeof navigator.mediaDevices.getUserMedia !== 'function') {\n        this.$message.error('No navigator.mediaDevices.getUserMedia');\n        return false;\n      }\n      this.canSupportVideo = true;\n      this.getDevices();\n      return true;\n    },\n    async getDevices () {\n      try {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        VIDEO_VIEW.showDevicesNameByDevices(devices);\n      } catch (error) {\n        console.error(error);\n        const msg = `getDevices error: ${error.name} : ${error.message}`;\n        this.$message.error(msg);\n      }\n    },\n    // 初始化socket事件\n    initSocketEvents () {\n      window.onbeforeunload = () => {\n        socket.emit('userLeave', {\n          userName: this.roomForm.userName,\n          sockId: this.sockId,\n          roomId: this.roomForm.roomId,\n        });\n      };\n      // 连接成功\n      socket.on('connectionSuccess', (sockId) => {\n        this.sockId = sockId;\n        console.log('connectionSuccess client sockId:', sockId);\n      });\n      // 房间人数已满提示\n      socket.on('checkRoomSuccess', (exsitRoomUsers) => {\n        this.canClickBtn = true;\n        if (exsitRoomUsers && exsitRoomUsers.length > 1) {\n          this.$message.info('当前房间人数已满~请换个房间id');\n        } else {\n          this.showFormArea = false;\n          this.roomUsers = [\n            {\n              userName: this.roomForm.userName + '(我)',\n              sockId: this.sockId,\n              roomId: this.roomForm.roomId,\n\n            }\n          ];\n        }\n      });\n      // 用户加入房间成功提示\n      socket.on('joinRoomSuccess', (roomUsers) => {\n        console.log('joinRoomSuccess client user:', roomUsers);\n        const otherUser = roomUsers.find(item => item.sockId !== this.sockId);\n        if (!otherUser) return false;\n        this.$message.success(`${otherUser.userName}加入了房间`);\n        this.roomUsers = [otherUser, {\n          userName: this.roomForm.userName + '(我)',\n          sockId: this.sockId,\n          roomId: this.roomForm.roomId,\n\n        }];\n      });\n      // 用户离开\n      socket.on('userLeave', (roomUsers) => {\n        console.log('userLeave client user:', roomUsers);\n        if (!roomUsers.length) {\n          this.showFormArea = true;\n          this.sockId = '';\n        }\n        const serverSockIdArr = roomUsers.map(item => item.sockId);\n        this.roomUsers.forEach(item => {\n          if (serverSockIdArr.indexOf(item.sockId) === -1) {\n            this.$message.info(`${item.userName}离开了房间`);\n            if (item.sockId === this.sockId) {\n              this.showFormArea = true;\n              this.sockId = '';\n            }\n          }\n        });\n        this.roomUsers = roomUsers;\n        this.roomUsers.forEach((item) => {\n          if (item.sockId === this.sockId) {\n            item.userName = item.userName + '(我)';\n          }\n        });\n        // TODO: 挂断视频\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      socket.on('disconnect', (message) => {\n        this.showFormArea = true;\n        this.sockId = '';\n        console.log('client sock disconnect:', message);\n        socket.emit('userLeave', this.user);\n        // TODO: 挂断视频\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 视频相关\n\n      // 取消发送视频\n      socket.on('cancelSendVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您取消了发送视频' : '对方取消了发送视频';\n        this.$message.info(infoTips);\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 接收视频邀请\n      socket.on('receiveVideo', (sender) => {\n        if (this.user.sockId === sender.sockId) return false;\n        VIDEO_VIEW.showReceiveVideoModalBySender(sender);\n      });\n      // 拒绝接收视频\n      socket.on('rejectReceiveVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您拒绝了接收视频' : '对方拒绝了接收视频';\n        this.$message.info(infoTips);\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 接听视频\n      socket.on('answerVideo', async (user) => {\n        VIDEO_VIEW.showInvideoModal();\n        // 创建本地视频流信息\n        const localStream = await this.createLocalVideoStream();\n        this.localStream = localStream;\n        document.querySelector('#echat-local').srcObject = this.localStream;\n        this.peer = new RTCPeerConnection();\n        console.log(this.peer);\n        this.initPeerListen();\n        this.peer.addStream(this.localStream);\n        if (user.sockId === this.sockId) {\n          // 接收方\n        } else {\n          // 发送方 创建offer\n          const offer = await this.peer.createOffer(this.offerOption);\n          await this.peer.setLocalDescription(offer);\n          socket.emit('receiveOffer', { user: this.user, offer });\n        }\n      });\n      // 挂断视频\n      socket.on('hangupVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您挂断了视频' : '对方挂断了视频';\n        this.$message.info(infoTips);\n        this.peer.close();\n        this.peer = null;\n        VIDEO_VIEW.hideAllVideoModal();\n        document.querySelector('#echat-remote-1').srcObject = null;\n        document.querySelector('#echat-local').srcObject = null;\n      });\n      //\n      socket.on('addIceCandidate', async (candidate) => {\n        await this.peer.addIceCandidate(candidate);\n      });\n      socket.on('receiveOffer', async (offer) => {\n        await this.peer.setRemoteDescription(offer);\n        const answer = await this.peer.createAnswer();\n        await this.peer.setLocalDescription(answer);\n        socket.emit('receiveAnsewer', { answer, user: this.user });\n      });\n      socket.on('receiveAnsewer', (answer) => {\n        this.peer.setRemoteDescription(answer);\n      });\n    },\n    submitForm () {\n      if (!this.sockId) {\n        this.$message.error('socket未连接成功,请刷新再尝试!');\n        window.location.reload();\n        return false;\n      }\n      this.$refs.roomForm.validate((valid) => {\n        if (valid) {\n        // 检查该房间人数\n          this.canClickBtn = false;\n          socket.emit('checkRoom', {\n            roomId: this.roomForm.roomId,\n            sockId: this.sockId,\n            userName: this.roomForm.userName\n          });\n        } else {\n          console.log('error submit!!');\n        }\n      });\n    },\n    resetForm () {\n      this.$refs.roomForm.resetFields();\n      this.roomForm.roomId = '';\n      this.roomForm.userName = '';\n    },\n    // 发送视频\n    toSendVideo () {\n      socket.emit('toSendVideo', this.user);\n      VIDEO_VIEW.showStartVideoModalByReceiver(this.receiveUser);\n    },\n    initVIDEO_VIEWSdk () {\n      const configOptios = {\n        startVideoCancelCb: this.startVideoCancelCb,\n        receiveVideoCancelCb: this.receiveVideoCancelCb,\n        receiveVideoAnswerCb: this.receiveVideoAnswerCb,\n        hangUpVideoCb: this.hangUpVideoCb,\n        openMikeCb: this.openMikeCb,\n        closeMikeCb: this.closeMikeCb,\n        openCammerCb: this.openCammerCb,\n        closeCammerCb: this.closeCammerCb,\n        toScreenCb: this.toScreenCb,\n      };\n      VIDEO_VIEW.configCallBack(configOptios);\n    },\n    startVideoCancelCb () {\n      socket.emit('cancelSendVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoCancelCb () {\n      socket.emit('rejectReceiveVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoAnswerCb () {\n      socket.emit('answerVideo', this.user);\n    },\n    hangUpVideoCb () {\n      socket.emit('hangupVideo', this.user);\n    },\n    openMikeCb () {\n\n    },\n    closeMikeCb () {\n\n    },\n    openCammerCb () {\n\n    },\n    closeCammerCb () {\n\n    },\n    toScreenCb () {\n\n    },\n    async createLocalVideoStream () {\n      const constraints = { audio: true, video: true };\n      const localStream = await navigator.mediaDevices.getUserMedia(constraints);\n      console.log('localStream:', localStream);\n      return localStream;\n    },\n    initPeerListen () {\n      this.peer.onicecandidate = (event) => {\n        if (event.candidate) { socket.emit('addIceCandidate', { candidate: event.candidate, user: this.user }); }\n      };\n      this.peer.onaddstream = (event) => {\n        // 拿到对方的视频流\n        document.querySelector('#echat-remote-1').srcObject = event.stream;\n      };\n      this.peer.onclose = () => {\n      };\n    },\n  }\n};\n</script>\n\n<style>\n.m-room-wrapper{\n    margin-top: 20px;\n}\n.m-room-wrapper .box-card {\n    width: 480px;\n}\n.m-room-wrapper .box-card .item{\n    padding: 18px 0;\n}\n</style>\n"],"sourceRoot":"src/pages"}]}