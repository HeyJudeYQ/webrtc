{"remainingRequest":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/src/pages/Room.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/src/pages/Room.vue","mtime":1606296723715},{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yq/Desktop/Study/webRTC/learn-webrtc/webrtc-static/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.m-room-wrapper{\n    margin-top: 20px;\n}\n.m-room-wrapper .box-card {\n    width: 480px;\n}\n.m-room-wrapper .box-card .item{\n    padding: 18px 0;\n}\n",{"version":3,"sources":["Room.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Room.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div class=\"m-room-wrapper\">\n      <div class=\"can-support-rtc\" v-if=\"canSupportVideo\">\n        <div class=\"form-area\" v-if=\"showFormArea\">\n            <el-form\n                :model=\"roomForm\"\n                :rules=\"rules\"\n                ref=\"roomForm\"\n                label-width=\"100px\"\n                class=\"room-form\"\n            >\n                <el-form-item label=\"房间ID\" prop=\"roomId\">\n                    <el-input v-model.trim=\"roomForm.roomId\" :disabled=\"!canClickBtn\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"姓名\" prop=\"userName\">\n                    <el-input v-model.trim=\"roomForm.userName\" :disabled=\"!canClickBtn\"></el-input>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"submitForm\" :disabled=\"!canClickBtn\">加入房间</el-button>\n                    <el-button @click=\"resetForm\">重置</el-button>\n                </el-form-item>\n            </el-form>\n        </div>\n        <div class=\"list-area\" v-if=\"!showFormArea\">\n            <h2>当前房间id: {{ roomForm.roomId }} </h2>\n            <h2>在线人数: {{ roomUsers.length }} </h2>\n            <el-card class=\"box-card\">\n                <div v-for=\"item in roomUsers\" :key=\"item.sockId\" class=\"item\">\n                    {{ item.userName }}\n                </div>\n            </el-card>\n            <el-button type=\"primary\" v-if=\"roomUsers.length > 1 && sockId\" @click=\"toSendVideo\">\n                发起视频\n            </el-button>\n        </div>\n      </div>\n      <div v-else>\n        <h1>当前域名的浏览器不支持WebRTC！</h1>\n      </div>\n    </div>\n</template>\n\n<script>\nimport socket from '../utils/socket.js';\n\nexport default {\n  name: 'Room',\n  created () {\n    if (this.canSupportWebRTC()) {\n      this.initSocketEvents();\n      this.initVIDEO_VIEWSdk();\n    }\n  },\n  data () {\n    const validateRoomId = (rule, value, callback) => {\n      const reg = /^\\d{1,4}$/;\n      if (!reg.test(value)) {\n        return callback(new Error('房间ID只能为1-4位的数字'));\n      }\n      callback();\n    };\n    const validateName = (rule, value, callback) => {\n      const reg = /^[\\u4e00-\\u9fa5a-zA-Z-z]{1,10}$/;\n      if (!reg.test(value)) {\n        return callback(new Error('请输入合法的姓名'));\n      }\n      callback();\n    };\n    return {\n      showFormArea: true,\n      roomForm: {\n        roomId: '',\n        userName: ''\n      },\n      rules: {\n        roomId: [\n          { required: true, message: '请输入房间ID', trigger: ['blur', 'change'] },\n          { validator: validateRoomId, trigger: ['blur', 'change'] }\n        ],\n        userName: [\n          { required: true, message: '请输入姓名', trigger: ['blur', 'change'] },\n          { validator: validateName, trigger: ['blur', 'change'] }\n        ],\n      },\n      canClickBtn: true,\n      sockId: '',\n      roomUsers: [],\n      canSupportVideo: false,\n      localStream: null,\n      peer: null,\n      peerConfigs: {\n        // 本地测试无需打洞 如部署到公网 需填写coturn的配置\n        // iceServers: [{\n        //   urls: 'turn:xxx:3478',\n        //   credential: 'xxx',\n        //   username: 'xxx'\n        // }],\n      },\n      offerOption: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n      },\n    };\n  },\n  computed: {\n    user () {\n      return Object.assign({}, { sockId: this.sockId }, this.roomForm);\n    },\n    receiveUser () {\n      return this.roomUsers.find(item => item.sockId !== this.sockId);\n    },\n  },\n  methods: {\n    // 判断设备是否webrtc\n    canSupportWebRTC () {\n      if (typeof navigator.mediaDevices !== 'object') {\n        this.$message.error('No navigator.mediaDevices');\n        return false;\n      }\n      if (typeof navigator.mediaDevices.enumerateDevices !== 'function') {\n        this.$message.error('No navigator.mediaDevices.enumerateDevices');\n        return false;\n      }\n      if (typeof navigator.mediaDevices.getUserMedia !== 'function') {\n        this.$message.error('No navigator.mediaDevices.getUserMedia');\n        return false;\n      }\n      this.canSupportVideo = true;\n      this.getDevices();\n      return true;\n    },\n    async getDevices () {\n      try {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        VIDEO_VIEW.showDevicesNameByDevices(devices);\n      } catch (error) {\n        console.error(error);\n        const msg = `getDevices error: ${error.name} : ${error.message}`;\n        this.$message.error(msg);\n      }\n    },\n    // 初始化socket事件\n    initSocketEvents () {\n      window.onbeforeunload = () => {\n        socket.emit('userLeave', {\n          userName: this.roomForm.userName,\n          sockId: this.sockId,\n          roomId: this.roomForm.roomId,\n        });\n      };\n      // 连接成功 \n      socket.on('connectionSuccess', (sockId) => {\n        this.sockId = sockId;\n        console.log('connectionSuccess client sockId:', sockId);\n      });\n      // 房间人数已满提示\n      socket.on('checkRoomSuccess', (exsitRoomUsers) => {\n        this.canClickBtn = true;\n        if (exsitRoomUsers && exsitRoomUsers.length > 1) {\n          this.$message.info('当前房间人数已满~请换个房间id');\n        } else {\n          this.showFormArea = false;\n          this.roomUsers = [\n            {\n              userName: this.roomForm.userName + '(我)',\n              sockId: this.sockId,\n              roomId: this.roomForm.roomId,\n\n            }\n          ];\n        }\n      });\n      // 用户加入房间成功提示\n      socket.on('joinRoomSuccess', (roomUsers) => {\n        console.log('joinRoomSuccess client user:', roomUsers);\n        const otherUser = roomUsers.find(item => item.sockId !== this.sockId);\n        if (!otherUser) return false;\n        this.$message.success(`${otherUser.userName}加入了房间`);\n        this.roomUsers = [otherUser, {\n          userName: this.roomForm.userName + '(我)',\n          sockId: this.sockId,\n          roomId: this.roomForm.roomId,\n\n        }];\n      });\n      // 用户离开\n      socket.on('userLeave', (roomUsers) => {\n        console.log('userLeave client user:', roomUsers);\n        if (!roomUsers.length) {\n          this.showFormArea = true;\n          this.sockId = '';\n        }\n        const serverSockIdArr = roomUsers.map(item => item.sockId);\n        this.roomUsers.forEach(item => {\n          if (serverSockIdArr.indexOf(item.sockId) === -1) {\n            this.$message.info(`${item.userName}离开了房间`);\n            if (item.sockId === this.sockId) {\n              this.showFormArea = true;\n              this.sockId = '';\n            }\n          }\n        });\n        this.roomUsers = roomUsers;\n        this.roomUsers.forEach((item) => {\n          if (item.sockId === this.sockId) {\n            item.userName = item.userName + '(我)';\n          }\n        });\n        // TODO: 挂断视频\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      socket.on('disconnect', (message) => {\n        this.showFormArea = true;\n        this.sockId = '';\n        console.log('client sock disconnect:', message);\n        socket.emit('userLeave', this.user);\n        // TODO: 挂断视频\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 视频相关\n\n      // 取消发送视频\n      socket.on('cancelSendVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您取消了发送视频' : '对方取消了发送视频';\n        this.$message.info(infoTips);\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 接收视频邀请\n      socket.on('receiveVideo', (sender) => {\n        if (this.user.sockId === sender.sockId) return false;\n        VIDEO_VIEW.showReceiveVideoModalBySender(sender);\n      });\n      // 拒绝接收视频\n      socket.on('rejectReceiveVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您拒绝了接收视频' : '对方拒绝了接收视频';\n        this.$message.info(infoTips);\n        VIDEO_VIEW.hideAllVideoModal();\n      });\n      // 接听视频\n      socket.on('answerVideo', async (user) => {\n        VIDEO_VIEW.showInvideoModal();\n        // 创建本地视频流信息\n        const localStream = await this.createLocalVideoStream();\n        this.localStream = localStream;\n        document.querySelector('#echat-local').srcObject = this.localStream;\n        this.peer = new RTCPeerConnection();\n        console.log(this.peer);\n        this.initPeerListen();\n        this.peer.addStream(this.localStream);\n        if (user.sockId === this.sockId) {\n          // 接收方\n        } else {\n          // 发送方 创建offer\n          const offer = await this.peer.createOffer(this.offerOption);\n          await this.peer.setLocalDescription(offer);\n          socket.emit('receiveOffer', { user: this.user, offer });\n        }\n      });\n      // 挂断视频\n      socket.on('hangupVideo', (user) => {\n        const infoTips = user.sockId === this.sockId ? '您挂断了视频' : '对方挂断了视频';\n        this.$message.info(infoTips);\n        this.peer.close();\n        this.peer = null;\n        VIDEO_VIEW.hideAllVideoModal();\n        document.querySelector('#echat-remote-1').srcObject = null;\n        document.querySelector('#echat-local').srcObject = null;\n      });\n      //\n      socket.on('addIceCandidate', async (candidate) => {\n        await this.peer.addIceCandidate(candidate);\n      });\n      socket.on('receiveOffer', async (offer) => {\n        await this.peer.setRemoteDescription(offer);\n        const answer = await this.peer.createAnswer();\n        await this.peer.setLocalDescription(answer);\n        socket.emit('receiveAnsewer', { answer, user: this.user });\n      });\n      socket.on('receiveAnsewer', (answer) => {\n        this.peer.setRemoteDescription(answer);\n      });\n    },\n    submitForm () {\n      if (!this.sockId) {\n        this.$message.error('socket未连接成功,请刷新再尝试!');\n        window.location.reload();\n        return false;\n      }\n      this.$refs.roomForm.validate((valid) => {\n        if (valid) {\n        // 检查该房间人数\n          this.canClickBtn = false;\n          socket.emit('checkRoom', {\n            roomId: this.roomForm.roomId,\n            sockId: this.sockId,\n            userName: this.roomForm.userName\n          });\n        } else {\n          console.log('error submit!!');\n        }\n      });\n    },\n    resetForm () {\n      this.$refs.roomForm.resetFields();\n      this.roomForm.roomId = '';\n      this.roomForm.userName = '';\n    },\n    // 发送视频\n    toSendVideo () {\n      socket.emit('toSendVideo', this.user);\n      VIDEO_VIEW.showStartVideoModalByReceiver(this.receiveUser);\n    },\n    initVIDEO_VIEWSdk () {\n      const configOptios = {\n        startVideoCancelCb: this.startVideoCancelCb,\n        receiveVideoCancelCb: this.receiveVideoCancelCb,\n        receiveVideoAnswerCb: this.receiveVideoAnswerCb,\n        hangUpVideoCb: this.hangUpVideoCb,\n        openMikeCb: this.openMikeCb,\n        closeMikeCb: this.closeMikeCb,\n        openCammerCb: this.openCammerCb,\n        closeCammerCb: this.closeCammerCb,\n        toScreenCb: this.toScreenCb,\n      };\n      VIDEO_VIEW.configCallBack(configOptios);\n    },\n    startVideoCancelCb () {\n      socket.emit('cancelSendVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoCancelCb () {\n      socket.emit('rejectReceiveVideo', this.user);\n      VIDEO_VIEW.hideAllVideoModal();\n    },\n    receiveVideoAnswerCb () {\n      socket.emit('answerVideo', this.user);\n    },\n    hangUpVideoCb () {\n      socket.emit('hangupVideo', this.user);\n    },\n    openMikeCb () {\n\n    },\n    closeMikeCb () {\n\n    },\n    openCammerCb () {\n\n    },\n    closeCammerCb () {\n\n    },\n    toScreenCb () {\n\n    },\n    async createLocalVideoStream () {\n      const constraints = { audio: true, video: true };\n      const localStream = await navigator.mediaDevices.getUserMedia(constraints);\n      console.log('localStream:', localStream);\n      return localStream;\n    },\n    initPeerListen () {\n      this.peer.onicecandidate = (event) => {\n        if (event.candidate) { socket.emit('addIceCandidate', { candidate: event.candidate, user: this.user }); }\n      };\n      this.peer.onaddstream = (event) => {\n        // 拿到对方的视频流\n        document.querySelector('#echat-remote-1').srcObject = event.stream;\n      };\n      this.peer.onclose = () => {\n      };\n    },\n  }\n};\n</script>\n\n<style>\n.m-room-wrapper{\n    margin-top: 20px;\n}\n.m-room-wrapper .box-card {\n    width: 480px;\n}\n.m-room-wrapper .box-card .item{\n    padding: 18px 0;\n}\n</style>\n"]}]}